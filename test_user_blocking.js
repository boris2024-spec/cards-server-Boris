// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
import http from 'http';

const API_BASE = 'http://localhost:3000';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function apiRequest(method, endpoint, data = null, token = null) {
    return new Promise((resolve, reject) => {
        const postData = data ? JSON.stringify(data) : null;

        const options = {
            hostname: 'localhost',
            port: 3000,
            path: endpoint,
            method: method,
            headers: {
                'Content-Type': 'application/json',
            }
        };

        if (token) {
            options.headers['x-auth-token'] = token;
        }

        if (postData) {
            options.headers['Content-Length'] = Buffer.byteLength(postData);
        }

        const req = http.request(options, (res) => {
            let body = '';

            res.on('data', (chunk) => {
                body += chunk;
            });

            res.on('end', () => {
                try {
                    const data = body ? JSON.parse(body) : null;
                    resolve({
                        status: res.statusCode,
                        data: data
                    });
                } catch {
                    resolve({
                        status: res.statusCode,
                        data: body
                    });
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (postData) {
            req.write(postData);
        }

        req.end();
    });
}

async function testUserBlocking() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n');

    try {
        // 1. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–æ–º)
        console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
        const adminData = {
            name: { first: 'Admin', last: 'User' },
            phone: '050-123 4567',
            email: `admin_${Date.now()}@example.com`,
            password: 'AdminPass123!',
            isBusiness: false
        };

        const adminRegister = await apiRequest('POST', '/users', adminData);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${adminRegister.status}`);
        console.log(`   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: ${adminRegister.data.email}`);
        console.log(`   isAdmin: ${adminRegister.data.isAdmin}\n`);

        // 2. –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω
        console.log('2Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
        const adminLogin = await apiRequest('POST', '/users/login', {
            email: adminData.email,
            password: adminData.password
        });
        const adminToken = adminLogin.data;
        console.log(`   –°—Ç–∞—Ç—É—Å: ${adminLogin.status}`);
        console.log(`   –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${adminToken ? '‚úÖ' : '‚ùå'}\n`);

        // 3. –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const userData = {
            name: { first: 'Regular', last: 'User' },
            phone: '050-987 6543',
            email: `user_${Date.now()}@example.com`,
            password: 'UserPass123!',
            isBusiness: true
        };

        const userRegister = await apiRequest('POST', '/users', userData);
        const userId = userRegister.data._id;
        console.log(`   –°—Ç–∞—Ç—É—Å: ${userRegister.status}`);
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${userRegister.data.email}`);
        console.log(`   ID: ${userId}`);
        console.log(`   isAdmin: ${userRegister.data.isAdmin}`);
        console.log(`   isBlocked: ${userRegister.data.isBlocked}\n`);

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
        console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const userLogin = await apiRequest('POST', '/users/login', {
            email: userData.email,
            password: userData.password
        });
        console.log(`   –°—Ç–∞—Ç—É—Å: ${userLogin.status}`);
        console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ${userLogin.status === 200 ? '‚úÖ' : '‚ùå'}\n`);

        // 5. –ê–¥–º–∏–Ω –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('5Ô∏è‚É£ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º...');
        const blockUser = await apiRequest('PATCH', `/users/${userId}/block`, null, adminToken);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${blockUser.status}`);
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${blockUser.data.isBlocked ? '‚úÖ' : '‚ùå'}`);
        console.log(`   isBlocked: ${blockUser.data.isBlocked}\n`);

        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
        console.log('6Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const blockedUserLogin = await apiRequest('POST', '/users/login', {
            email: userData.email,
            password: userData.password
        });
        console.log(`   –°—Ç–∞—Ç—É—Å: ${blockedUserLogin.status}`);
        console.log(`   –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${blockedUserLogin.status === 403 ? '‚úÖ' : '‚ùå'}`);
        console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${blockedUserLogin.data}\n`);

        // 7. –ê–¥–º–∏–Ω —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('7Ô∏è‚É£ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º...');
        const unblockUser = await apiRequest('PATCH', `/users/${userId}/unblock`, null, adminToken);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${unblockUser.status}`);
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${!unblockUser.data.isBlocked ? '‚úÖ' : '‚ùå'}`);
        console.log(`   isBlocked: ${unblockUser.data.isBlocked}\n`);

        // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
        console.log('8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const unblockedUserLogin = await apiRequest('POST', '/users/login', {
            email: userData.email,
            password: userData.password
        });
        console.log(`   –°—Ç–∞—Ç—É—Å: ${unblockedUserLogin.status}`);
        console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${unblockedUserLogin.status === 200 ? '‚úÖ' : '‚ùå'}\n`);

        // 9. –ü–æ–ø—ã—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        console.log('9Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ...');
        const userToken = unblockedUserLogin.data;
        const unauthorizedBlock = await apiRequest('PATCH', `/users/${adminRegister.data._id}/block`, null, userToken);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${unauthorizedBlock.status}`);
        console.log(`   –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: ${unauthorizedBlock.status === 403 ? '‚úÖ' : '‚ùå'}`);
        console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${unauthorizedBlock.data}\n`);

        console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    testUserBlocking();
}

export { testUserBlocking };
